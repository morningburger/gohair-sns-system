// ÏßÄÏ†ê ÎπÑÍµê Î∂ÑÏÑù ÌéòÏù¥ÏßÄ Ï†ÑÏö© Î°úÏßÅ

class ComparisonManager {
    constructor() {
        this.data = {
            branches: [],
            designers: [],
            checklists: []
        };
        this.currentUser = null;
        this.selectedBranches = [];
        this.currentPeriod = 'month';
        this.currentCategory = 'all';
        this.charts = {
            comparisonChart: null,
            categoryChart: null
        };
    }

    // ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    async initialize() {
        try {
            // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
            this.currentUser = this.getCurrentUser();
            this.updateUserDisplay();
            
            // Í∂åÌïú ÌôïÏù∏
            if (!this.currentUser) {
                window.location.href = '../index.html';
                return;
            }
            
            // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            await this.loadAllData();
            
            // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
            this.setupEventListeners();
            
            // ÏßÄÏ†ê Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÉùÏÑ±
            this.setupBranchCheckboxes();
            
            console.log('ÎπÑÍµê ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
        } catch (error) {
            console.error('ÎπÑÍµê ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
        }
    }

    // ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    getCurrentUser() {
        try {
            const userData = sessionStorage.getItem('currentUser');
            return userData ? JSON.parse(userData) : null;
        } catch {
            return null;
        }
    }

    // ÏÇ¨Ïö©Ïûê ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
    updateUserDisplay() {
        const userElement = document.getElementById('currentUser');
        if (userElement && this.currentUser) {
            userElement.textContent = `${this.currentUser.name} (${this.currentUser.role})`;
        }
    }

    // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    async loadAllData() {
        try {
            // Ïã§Ï†úÎ°úÎäî FirebaseÏóêÏÑú Î°úÎìú
            this.data.branches = this.generateSampleBranches();
            this.data.designers = this.generateSampleDesigners();
            this.data.checklists = this.generateSampleChecklists();
            
        } catch (error) {
            console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò:', error);
            throw error;
        }
    }

    // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    generateSampleBranches() {
        const branches = [
            { id: 1, name: 'ÏÜ°ÎèÑÏÑºÌä∏Îü¥Ï†ê', code: 'SD01', address: 'Ïù∏Ï≤úÏãú Ïó∞ÏàòÍµ¨ ÏÜ°ÎèÑÍ≥ºÌïôÎ°ú 32' },
            { id: 2, name: 'Í≤ÄÎã®ÌÖåÎùºÏä§Ï†ê', code: 'GD01', address: 'Ïù∏Ï≤úÏãú ÏÑúÍµ¨ Í≤ÄÎã®Ïã†ÎèÑÏãúÎ°ú 123' },
            { id: 3, name: 'Î∂ÄÌèâÏ†ê', code: 'BP01', address: 'Ïù∏Ï≤úÏãú Î∂ÄÌèâÍµ¨ Î∂ÄÌèâÎåÄÎ°ú 456' },
            { id: 4, name: 'Ïù∏Ï≤úÎÖºÌòÑÏ†ê', code: 'IC01', address: 'Ïù∏Ï≤úÏãú ÎÇ®ÎèôÍµ¨ ÎÖºÌòÑÎèô 789' },
            { id: 5, name: 'Ï≤≠ÎùºÍµ≠Ï†úÏ†ê', code: 'CL01', address: 'Ïù∏Ï≤úÏãú ÏÑúÍµ¨ Ï≤≠ÎùºÍµ≠Ï†úÎ°ú 321' }
        ];
        
        // ÏÇ¨Ïö©Ïûê Í∂åÌïúÏóê Îî∞Î•∏ ÌïÑÌÑ∞ÎßÅ
        if (this.currentUser && this.currentUser.role === 'leader') {
            return branches.filter(b => b.name === this.currentUser.branch);
        }
        
        return branches;
    }

    generateSampleDesigners() {
        const branches = ['ÏÜ°ÎèÑÏÑºÌä∏Îü¥Ï†ê', 'Í≤ÄÎã®ÌÖåÎùºÏä§Ï†ê', 'Î∂ÄÌèâÏ†ê', 'Ïù∏Ï≤úÎÖºÌòÑÏ†ê', 'Ï≤≠ÎùºÍµ≠Ï†úÏ†ê'];
        const names = ['ÍπÄÏàòÌòÑ', 'Ïù¥ÏßÄÎØº', 'Î∞ïÏ§ÄÌò∏', 'ÏµúÎØ∏ÏòÅ', 'Ï†ïÌÉúÏú§', 'ÌïúÏÜåÌù¨', 'Ïò§ÎØºÏÑù', 'Ïã†ÏòàÏùÄ', 'Ïú§ÏÑúÏó∞', 'Ïû•ÎèÑÌòÑ'];
        
        return names.map((name, index) => ({
            id: index + 1,
            name: name,
            branch: branches[Math.floor(Math.random() * branches.length)],
            position: 'ÎîîÏûêÏù¥ÎÑà'
        }));
    }

    generateSampleChecklists() {
        const data = [];
        const designers = this.data.designers || this.generateSampleDesigners();
        
        designers.forEach(designer => {
            const recordCount = Math.floor(Math.random() * 25) + 15; // 15-39Í∞ú Í∏∞Î°ù
            
            for (let i = 0; i < recordCount; i++) {
                const date = new Date();
                date.setDate(date.getDate() - Math.floor(Math.random() * 90)); // ÏµúÍ∑º 90Ïùº
                
                data.push({
                    id: `checklist_${designer.id}_${i}`,
                    designerId: designer.id,
                    designer: designer.name,
                    branch: designer.branch,
                    date: date.toISOString().split('T')[0],
                    naverReviews: Math.floor(Math.random() * 8),
                    naverPosts: Math.floor(Math.random() * 4),
                    naverExperience: Math.floor(Math.random() * 2),
                    instaReels: Math.floor(Math.random() * 6),
                    instaPhotos: Math.floor(Math.random() * 10)
                });
            }
        });
        
        return data;
    }

    // ÏßÄÏ†ê Ï≤¥ÌÅ¨Î∞ïÏä§ ÏÑ§Ï†ï
    setupBranchCheckboxes() {
        const container = document.getElementById('branchCheckboxes');
        if (!container) return;

        container.innerHTML = this.data.branches.map(branch => `
            


                    
${branch.name}

                    
${branch.code} ‚Ä¢ ${branch.address.substring(0, 20)}...

                

        `).join('');
    }

    // ÎπÑÍµê ÏóÖÎç∞Ïù¥Ìä∏
    updateComparison() {
        this.selectedBranches = Array.from(document.querySelectorAll('#branchCheckboxes input[type="checkbox"]:checked'))
            .map(cb => cb.value);
        
        if (this.selectedBranches.length === 0) {
            document.getElementById('comparisonResult').innerHTML = `
                

                    
‚öñÔ∏è

                    
ÎπÑÍµêÌï† ÏßÄÏ†êÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.


                

            `;
            return;
        }

        this.currentPeriod = document.getElementById('comparisonPeriod').value;
        this.currentCategory = document.getElementById('comparisonCategory').value;
        
        // Î°úÎî© ÌëúÏãú
        document.getElementById('comparisonResult').innerHTML = `
            

                
‚è≥

                
ÎπÑÍµê Î∂ÑÏÑù Ï§ë...


            

        `;

        // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ Í≤∞Í≥º ÌëúÏãú
        setTimeout(() => {
            this.displayComparison();
        }, 800);
    }

    // ÎπÑÍµê Í≤∞Í≥º ÌëúÏãú
    displayComparison() {
        const comparisonData = this.calculateComparisonData();
        
        const resultHTML = `
            

                
                

                    
üìä ÎπÑÍµê Î∂ÑÏÑù Í≤∞Í≥º

                    
üìç ÏÑ†ÌÉù ÏßÄÏ†ê: ${this.selectedBranches.join(', ')}
üìÖ Î∂ÑÏÑù Í∏∞Í∞Ñ: ${this.getPeriodLabel()}
üè∑Ô∏è Î∂ÑÏÑù Ïπ¥ÌÖåÍ≥†Î¶¨: ${this.getCategoryLabel()}

                


                
                

                    ${comparisonData.branches.map((branch, index) => {
                        const isTop = index === 0;
                        const cardStyle = isTop ? 
                            'background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%); color: white; transform: scale(1.02);' : 
                            'background: white; border: 1px solid #e5e7eb;';
                        
                        return `
                            

                                

                                        
${branch.name}

                                        ${isTop ? '
üèÜ 1ÏúÑ
' : ''}
                                    

                                        
${branch.total}

                                        
Ï¥ù ÌôúÎèôÎüâ

                                    

                                
                                
‚≠ê Î¶¨Î∑∞: ${branch.reviews}
üìù Ìè¨Ïä§ÌåÖ: ${branch.posts}
üéØ Ï≤¥ÌóòÎã®: ${branch.experience}
üé¨ Î¶¥Ïä§: ${branch.reels}
üì∑ ÏÇ¨ÏßÑ: ${branch.photos}

                                
                                

                                    

                                        ÌèâÍ∑† ÏùºÏùº ÌôúÎèôÎüâ: ${branch.dailyAverage}
                                    

                                

                            

                        `;
                    }).join('')}
                


                
                

                    
üìà ÏßÄÏ†êÎ≥Ñ ÏÉÅÏÑ∏ ÎπÑÍµê

                    

                        
                    

                


                
                

                        
üèÜ Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ 1ÏúÑ

                        

                            ${Object.entries(comparisonData.categoryWinners).map(([category, winner]) => `
                                
${this.getCategoryIcon(category)} ${this.getCategoryName(category)}
${winner.branch} (${winner.value})

                            `).join('')}
                        

                    

                        
üìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÌè¨

                        

                            
                        

                    


                
                

                    
üí° Î∂ÑÏÑù Ïù∏ÏÇ¨Ïù¥Ìä∏

                    

                        ${this.generateInsights(comparisonData)}
                    

                

            

        `;

        document.getElementById('comparisonResult').innerHTML = resultHTML;
        
        // Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞
        setTimeout(() => {
            this.drawCharts(comparisonData);
        }, 100);
    }

    // ÎπÑÍµê Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
    calculateComparisonData() {
        const branchData = this.selectedBranches.map(branchName => {
            const filteredChecklists = this.getFilteredChecklists(branchName);
            
            const stats = filteredChecklists.reduce((acc, c) => {
                acc.reviews += c.naverReviews || 0;
                acc.posts += c.naverPosts || 0;
                acc.experience += c.naverExperience || 0;
                acc.reels += c.instaReels || 0;
                acc.photos += c.instaPhotos || 0;
                return acc;
            }, { reviews: 0, posts: 0, experience: 0, reels: 0, photos: 0 });

            const total = stats.reviews + stats.posts + stats.experience + stats.reels + stats.photos;
            const days = this.getDaysInPeriod();
            const dailyAverage = days > 0 ? Math.round((total / days) * 10) / 10 : 0;

            return {
                name: branchName,
                ...stats,
                total,
                dailyAverage
            };
        });

        // Ï¥ù ÌôúÎèôÎüâÏúºÎ°ú Ï†ïÎ†¨
        branchData.sort((a, b) => b.total - a.total);

        // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ 1ÏúÑ Í≥ÑÏÇ∞
        const categoryWinners = {
            reviews: branchData.reduce((prev, current) => prev.reviews > current.reviews ? prev : current),
            posts: branchData.reduce((prev, current) => prev.posts > current.posts ? prev : current),
            experience: branchData.reduce((prev, current) => prev.experience > current.experience ? prev : current),
            reels: branchData.reduce((prev, current) => prev.reels > current.reels ? prev : current),
            photos: branchData.reduce((prev, current) => prev.photos > current.photos ? prev : current)
        };

        Object.keys(categoryWinners).forEach(key => {
            categoryWinners[key] = {
                branch: categoryWinners[key].name,
                value: categoryWinners[key][key]
            };
        });

        return {
            branches: branchData,
            categoryWinners,
            totalSelected: this.selectedBranches.length
        };
    }

    // ÌïÑÌÑ∞ÎßÅÎêú Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
    getFilteredChecklists(branchName) {
        let checklists = this.data.checklists.filter(c => c.branch === branchName);
        
        // Í∏∞Í∞Ñ ÌïÑÌÑ∞ÎßÅ
        const now = new Date();
        let filterDate;

        switch(this.currentPeriod) {
            case 'week':
                filterDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                break;
            case 'month':
                filterDate = new Date(now.getFullYear(), now.getMonth(), 1);
                break;
            case 'quarter':
                const quarter = Math.floor(now.getMonth() / 3);
                filterDate = new Date(now.getFullYear(), quarter * 3, 1);
                break;
            default:
                return checklists;
        }

        return checklists.filter(c => new Date(c.date) >= filterDate);
    }

    // Í∏∞Í∞ÑÏùò ÏùºÏàò Í≥ÑÏÇ∞
    getDaysInPeriod() {
        switch(this.currentPeriod) {
            case 'week': return 7;
            case 'month': 
                const now = new Date();
                return new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
            case 'quarter': return 90;
            default: return 30;
        }
    }

    // Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞
    drawCharts(data) {
        this.drawComparisonChart(data);
        this.drawCategoryChart(data);
    }

    // ÎπÑÍµê Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞
    drawComparisonChart(data) {
        const ctx = document.getElementById('comparisonChart');
        if (!ctx) return;

        if (this.charts.comparisonChart) {
            this.charts.comparisonChart.destroy();
        }

        this.charts.comparisonChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: data.branches.map(b => b.name),
                datasets: [
                    {
                        label: '‚≠ê ÎÑ§Ïù¥Î≤Ñ Î¶¨Î∑∞',
                        data: data.branches.map(b => b.reviews),
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                    },
                    {
                        label: 'üìù Î∏îÎ°úÍ∑∏ Ìè¨Ïä§ÌåÖ',
                        data: data.branches.map(b => b.posts),
                        backgroundColor: 'rgba(16, 185, 129, 0.8)',
                    },
                    {
                        label: 'üéØ Ï≤¥ÌóòÎã®',
                        data: data.branches.map(b => b.experience),
                        backgroundColor: 'rgba(245, 158, 11, 0.8)',
                    },
                    {
                        label: 'üé¨ Ïù∏Ïä§ÌÉÄ Î¶¥Ïä§',
                        data: data.branches.map(b => b.reels),
                        backgroundColor: 'rgba(239, 68, 68, 0.8)',
                    },
                    {
                        label: 'üì∑ Ïù∏Ïä§ÌÉÄ ÏÇ¨ÏßÑ',
                        data: data.branches.map(b => b.photos),
                        backgroundColor: 'rgba(139, 92, 246, 0.8)',
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: { stacked: true },
                    y: { stacked: true, beginAtZero: true }
                },
                plugins: {
                    legend: { position: 'top' }
                }
            }
        });
    }

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∞®Ìä∏ Í∑∏Î¶¨Í∏∞
    drawCategoryChart(data) {
        const ctx = document.getElementById('categoryChart');
        if (!ctx) return;

        if (this.charts.categoryChart) {
            this.charts.categoryChart.destroy();
        }

        const totalStats = data.branches.reduce((acc, branch) => {
            acc.reviews += branch.reviews;
            acc.posts += branch.posts;
            acc.experience += branch.experience;
            acc.reels += branch.reels;
            acc.photos += branch.photos;
            return acc;
        }, { reviews: 0, posts: 0, experience: 0, reels: 0, photos: 0 });

        this.charts.categoryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['‚≠ê ÎÑ§Ïù¥Î≤Ñ Î¶¨Î∑∞', 'üìù Î∏îÎ°úÍ∑∏ Ìè¨Ïä§ÌåÖ', 'üéØ Ï≤¥ÌóòÎã®', 'üé¨ Ïù∏Ïä§ÌÉÄ Î¶¥Ïä§', 'üì∑ Ïù∏Ïä§ÌÉÄ ÏÇ¨ÏßÑ'],
                datasets: [{
                    data: [totalStats.reviews, totalStats.posts, totalStats.experience, totalStats.reels, totalStats.photos],
                    backgroundColor: [
                        'rgba(59, 130, 246, 0.8)',
                        'rgba(16, 185, 129, 0.8)',
                        'rgba(245, 158, 11, 0.8)',
                        'rgba(239, 68, 68, 0.8)',
                        'rgba(139, 92, 246, 0.8)'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { position: 'bottom' }
                }
            }
        });
    }

    // Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ±
    generateInsights(data) {
        const insights = [];
        const branches = data.branches;
        
        if (branches.length >= 2) {
            const top = branches[0];
            const bottom = branches[branches.length - 1];
            const gap = top.total - bottom.total;
            
            insights.push(`‚Ä¢ ÏµúÍ≥† ÏÑ±Í≥º ÏßÄÏ†êÏù∏ "${top.name}"ÏôÄ ÏµúÌïòÏúÑ "${bottom.name}" Í∞Ñ ÌôúÎèôÎüâ Ï∞®Ïù¥Îäî ${gap}Í±¥ÏûÖÎãàÎã§.`);
            
            if (top.dailyAverage > 0) {
                insights.push(`‚Ä¢ "${top.name}"Ïùò ÏùºÌèâÍ∑† ÌôúÎèôÎüâÏùÄ ${top.dailyAverage}Í±¥ÏúºÎ°ú Í∞ÄÏû• ÎÜíÏäµÎãàÎã§.`);
            }
        }

        // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Î∂ÑÏÑù
        const winners = data.categoryWinners;
        const dominantBranch = Object.values(winners).reduce((acc, curr) => {
            acc[curr.branch] = (acc[curr.branch] || 0) + 1;
            return acc;
        }, {});

        const maxWins = Math.max(...Object.values(dominantBranch));
        const dominantBranches = Object.entries(dominantBranch)
            .filter(([_, wins]) => wins === maxWins)
            .map(([branch, _]) => branch);

        if (dominantBranches.length === 1 && maxWins >= 3) {
            insights.push(`‚Ä¢ "${dominantBranches[0]}"Ïù¥ ${maxWins}Í∞ú Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑú 1ÏúÑÎ•º Ï∞®ÏßÄÌïòÎ©∞ Ï†ÑÏ≤¥Ï†ÅÏúºÎ°ú Ïö∞ÏàòÌïú ÏÑ±Í≥ºÎ•º Î≥¥ÏûÖÎãàÎã§.`);
        }

        if (insights.length === 0) {
            insights.push('‚Ä¢ ÏÑ†ÌÉùÎêú ÏßÄÏ†êÎì§Ïù¥ Í≥†Î•∏ ÏÑ±Í≥ºÎ•º Î≥¥Ïù¥Í≥† ÏûàÏäµÎãàÎã§.');
        }

        return insights.map(insight => `
${insight}
`).join('');
    }

    // Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
    getPeriodLabel() {
        const labels = {
            week: 'ÏµúÍ∑º 1Ï£ºÏùº',
            month: 'Ïù¥Î≤à Îã¨',
            quarter: 'Ïù¥Î≤à Î∂ÑÍ∏∞'
        };
        return labels[this.currentPeriod] || 'Ïù¥Î≤à Îã¨';
    }

    getCategoryLabel() {
        const labels = {
            all: 'Ï†ÑÏ≤¥',
            reviews: 'ÎÑ§Ïù¥Î≤Ñ Î¶¨Î∑∞',
            posts: 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§ÌåÖ',
            experience: 'Ï≤¥ÌóòÎã®',
            reels: 'Ïù∏Ïä§ÌÉÄ Î¶¥Ïä§',
            photos: 'Ïù∏Ïä§ÌÉÄ ÏÇ¨ÏßÑ'
        };
        return labels[this.currentCategory] || 'Ï†ÑÏ≤¥';
    }

    getCategoryIcon(category) {
        const icons = {
            reviews: '‚≠ê',
            posts: 'üìù',
            experience: 'üéØ',
            reels: 'üé¨',
            photos: 'üì∑'
        };
        return icons[category] || 'üìä';
    }

    getCategoryName(category) {
        const names = {
            reviews: 'ÎÑ§Ïù¥Î≤Ñ Î¶¨Î∑∞',
            posts: 'Î∏îÎ°úÍ∑∏ Ìè¨Ïä§ÌåÖ',
            experience: 'Ï≤¥ÌóòÎã®',
            reels: 'Ïù∏Ïä§ÌÉÄ Î¶¥Ïä§',
            photos: 'Ïù∏Ïä§ÌÉÄ ÏÇ¨ÏßÑ'
        };
        return names[category] || category;
    }

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    setupEventListeners() {
        // Ï†ÑÏ≤¥ ÏÑ†ÌÉù Ï≤¥ÌÅ¨Î∞ïÏä§
        const selectAllCheckbox = document.getElementById('selectAllBranches');
        const branchCheckboxes = document.querySelectorAll('#branchCheckboxes input[type="checkbox"]');
        
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                branchCheckboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        }
        
        // Í∞úÎ≥Ñ Ï≤¥ÌÅ¨Î∞ïÏä§ Î≥ÄÍ≤Ω Ïãú Ï†ÑÏ≤¥ ÏÑ†ÌÉù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        branchCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const checkedCount = document.querySelectorAll('#branchCheckboxes input[type="checkbox"]:checked').length;
                if (selectAllCheckbox) {
                    selectAllCheckbox.checked = checkedCount === branchCheckboxes.length;
                }
            });
        });
    }

    // ÎπÑÍµê Í≤∞Í≥º ÎÇ¥Î≥¥ÎÇ¥Í∏∞
    exportComparison() {
        if (this.selectedBranches.length === 0) {
            alert('ÎπÑÍµêÌï† ÏßÄÏ†êÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        const comparisonData = this.calculateComparisonData();
        
        let csvContent = "ÏàúÏúÑ,ÏßÄÏ†êÎ™Ö,ÎÑ§Ïù¥Î≤ÑÎ¶¨Î∑∞,Î∏îÎ°úÍ∑∏Ìè¨Ïä§ÌåÖ,Ï≤¥ÌóòÎã®,Ïù∏Ïä§ÌÉÄÎ¶¥Ïä§,Ïù∏Ïä§ÌÉÄÏÇ¨ÏßÑ,Ï¥ùÌôúÎèôÎüâ,ÏùºÌèâÍ∑†ÌôúÎèôÎüâ\n";
        
        comparisonData.branches.forEach((branch, index) => {
            csvContent += `${index + 1},${branch.name},${branch.reviews},${branch.posts},${branch.experience},${branch.reels},${branch.photos},${branch.total},${branch.dailyAverage}\n`;
        });
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement("a");
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", `GOHAIR_ÏßÄÏ†êÎπÑÍµê_${this.getPeriodLabel()}_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

// Ï†ÑÏó≠ Ìï®ÏàòÎì§
function updateComparison() {
    window.comparisonManager?.updateComparison();
}

function exportComparison() {
    window.comparisonManager?.exportComparison();
}

function goToMainSystem() {
    window.location.href = '../index.html';
}

function goToPage(pageId) {
    const pages = {
        'designers': 'designers.html',
        'branches': 'branches.html',
        'history': 'history.html',
        'checklist': 'checklist.html',
        'statistics': 'statistics.html'
    };
    
    if (pages[pageId]) {
        window.location.href = pages[pageId];
    }
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
    window.comparisonManager = new ComparisonManager();
    window.comparisonManager.initialize();
});

console.log('ÎπÑÍµê ÌéòÏù¥ÏßÄ Ïä§ÌÅ¨Î¶ΩÌä∏ Î°úÎî© ÏôÑÎ£å');